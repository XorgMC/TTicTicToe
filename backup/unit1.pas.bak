unit Unit1;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs,
  StdCtrls, ExtCtrls, StrUtils, RegExpr, fpjson, jsonparser;

type

  { TForm1 }

  TArrayBehindert = Array of INteger;

  TForm1 = class(TForm)
    FlowPanel1: TFlowPanel;
    grdB: TLabel;
    grdC: TLabel;
    Button1: TButton;
    cmdReset: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    Button7: TButton;
    Button8: TButton;
    Button9: TButton;
    GroupBox1: TGroupBox;
    grdA: TLabel;
    grd1: TLabel;
    grd2: TLabel;
    grd3: TLabel;
    logBox: TListBox;
    procedure Button10Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure cmdResetClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    function GetPossibleMoves(curState: String): TArrayBehindert;
  public

  end;

var
  Form1: TForm1;
  Q: TJSONObject;
  ALPHA: double;
  GAMMA: double;
  GRUN: boolean;
  rx, ro: TRegExpr;
  wx, wo, wn: integer;



implementation

{$R *.lfm}

{ TForm1 }

function IntButton(i: integer): TButton;
begin
  with Form1 do
  begin
    case i of
      1:
        Result := Button1;
      2:
        Result := Button2;
      3:
        Result := Button3;
      4:
        Result := Button4;
      5:
        Result := Button5;
      6:
        Result := Button6;
      7:
        Result := Button7;
      8:
        Result := Button8;
      9:
        Result := Button9;
      else
        Result := nil;
    end;
  end;
end;

function BoardToString(): string;
var
  i: integer;
  s: string;
  l: string;
begin
  s := '';
  for i := 1 to 9 do
  begin
    l := TButton(Form1.FindComponent('Button' + i.ToString)).Caption;
    if Length(l) = 0 then
      s := s + '_'
    else
      s := s + l;
  end;
  Result := s;
end;

procedure MoveDone2(PC: boolean);
var
  BS: string;
begin
  BS := BoardToString();
  if GRUN then
  begin
    if rx.Exec(BS) then
    begin
      GRUN := False;
      Inc(wx);
      ShowMessage('X hat gewonnen');
    end
    else if ro.Exec(BS) then
    begin
      GRUN := False;
      Inc(wo);
      ShowMessage('O hat gewonnen');
    end
    else
    begin
      if not AnsiContainsStr(BS, '_') then
      begin
        GRUN := False;
        Inc(wn);
        ShowMessage('Unentschieden!');
      end;
    end;

  end;
end;

function NumToCoord(i: integer): String;
begin
  case i of
    1:
      Result:='A1';
    2:
      Result:='B1';
    3:
      Result:='C1';
    4:
      Result:='A2';
    5:
      Result:='B2';
    6:
      Result:='C2';
    7:
      Result:='A3';
    8:
      Result:='B3';
    9:
      Result:='C3';
    else
      Result:='Unknown';
  end;
end;

procedure RandomMove();
var
  f: integer;
  b: TButton;
  m: Array of Integer;
  i: Integer;
begin
  m:=Form1.GetPossibleMoves(BoardToString());
  for i:=0 to Length(m) - 1 do
  begin
       Form1.logBox.Items.Add('Ist frei: ' + IntToStr(m[i]));
  end;
  f := Random(9) + 1;
  b := IntButton(f);
  if b.Caption <> '' then
  begin
    Form1.logBox.Items.Add('Gewähltes Feld ' + NumToCoord(f) + ' ist belegt, suche anderes');
    RandomMove()
  end
  else
  begin
    Form1.logBox.Items.Add('Wähle Feld ' + NumToCoord(f));
    b.Caption := 'X';
  end;
  MoveDone2(True);
end;

procedure DoPcMove();
begin
  RandomMove();
end;

procedure MoveDone(PC: boolean);
var
  BS: string;
begin
  BS := BoardToString();
  if GRUN then  //TODO: Zweifach-Überprüfung entfernen
  begin
    if rx.Exec(BS) then
    begin
      GRUN := False;
      Inc(wx);
      ShowMessage('X hat gewonnen');
    end
    else if ro.Exec(BS) then
    begin
      GRUN := False;
      Inc(wo);
      ShowMessage('O hat gewonnen');
    end
    else
    begin
      if not AnsiContainsStr(BS, '_') then
      begin
        GRUN := False;
        Inc(wn);
        ShowMessage('Unentschieden!');
      end
      else
      begin
        if not PC then
          DoPcMove();
      end;
    end;

    if not GRUN then
    begin
      Form1.logBox.Items.Add('Spielende - X: ' + IntToStr(wx) + '; O: ' + IntToStr(wo) + '; UE: ' + IntToStr(wn));
    end;
  end;
end;

function FindButton(O: TObject): integer;
begin
  with Form1 do
  begin
    if O.Equals(Button1) then
      Result := 1
    else if O.Equals(Button2) then
      Result := 2
    else if O.Equals(Button3) then
      Result := 3
    else if O.Equals(Button4) then
      Result := 4
    else if O.Equals(Button5) then
      Result := 5
    else if O.Equals(Button6) then
      Result := 6
    else if O.Equals(Button7) then
      Result := 7
    else if O.Equals(Button8) then
      Result := 8
    else if O.Equals(Button9) then
      Result := 9
    else
      Result := 0;
  end;
end;

procedure TForm1.Button10Click(Sender: TObject);
begin

end;

procedure TForm1.Button1Click(Sender: TObject);
var
  BS: string;
begin
  if GRUN then
  begin
    logBox.Items.Add('Spieler platziert bei ' + NumToCoord(FindButton(Sender)));
    TButton(Sender).Caption := 'O';
    MoveDone(False);
  end;
  //BS:=BoardToString();
  //ShowMessage(CheckResult(BS));
  //if NOT hasGameEnded(BS) then RandomMove();
  //ShowMessage(IntToStr(FindButton(Sender)));
end;

procedure TForm1.cmdResetClick(Sender: TObject);
var
  i: integer;
begin
  for i := 1 to 9 do
  begin
    TButton(Form1.FindComponent('Button' + i.ToString)).Caption := '';
  end;
  GRUN := True;
  logBox.Items.Add('---------------------');
  logBox.Items.Add('Neues Spiel gestartet');
end;

procedure InitGame();
begin
  ALPHA := 0.3;
  GAMMA := 0.9;
  Q:=TJSONObject.Create;
  randomize();
  ro := TRegExpr.Create;
  rx := TRegExpr.Create;
  rx.Expression :=
    '(XXX......)|(...XXX...)|(......XXX)|(X..X..X..)|(.X..X..X.)|(..X..X..X)|(X...X...X)|(..X.X.X..)';
  ro.Expression :=
    '(OOO......)|(...OOO...)|(......OOO)|(O..O..O..)|(.O..O..O.)|(..O..O..O)|(O...O...O)|(..O.O.O..)';
  GRUN := True;
  wx:=0;
  wo:=0;
end;

//function ConsiderStateKey(mpos: int): TJSONObject;
//begin
//   Result:=NIL;
//end;

procedure LerneQ(pPos: int);
begin

end;

function TForm1.GetPossibleMoves(curState: String): TArrayBehindert;
var x:Array of Integer;
  i:INteger;
begin
  SetLength(x, 0);
  for i:=1 to Length(curState) do
  begin
    if curState[i] = '_' then
    begin
      SetLength(x, Length(x) + 1);
      x[Length(x)-1]:=i;
            ShowMessage(IntToStr(i));
    end;
  end;
  Result:=x;
end;

procedure UninitGame();
begin
  rx.Free;
  ro.Free;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  InitGame();
end;

end.
